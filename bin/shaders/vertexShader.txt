#version 400 core

in vec3 position;
in vec2 textureCoords;

out vec2 pass_textureCoords;
out float[5] lightDistance;
out vec3[5] pass_lightPos;

uniform mat4 tMatrix;
uniform mat4 vMatrix;
uniform mat4 pMatrix;
uniform vec3[5] lightPos;


void main(void){
	vec4 worldPosition = tMatrix * vec4(position, 1.0);
	gl_Position = pMatrix *  vMatrix * worldPosition;
	for(int i = 0; i < 5; i++){
		pass_lightPos[i] = lightPos[i];
		lightDistance[i] = sqrt(pow(lightPos[i].y, 2) + pow(sqrt((lightPos[i].x * lightPos[i].x) + (lightPos[i].z * lightPos[i].z)), 2)) + sqrt(pow(worldPosition.y, 2) + pow(sqrt(pow(worldPosition.x, 2) + pow(worldPosition.z, 2)),2));
	}
	pass_textureCoords = textureCoords;
	

}